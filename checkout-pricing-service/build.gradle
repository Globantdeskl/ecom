buildscript {
	dependencies {
		classpath(
			["org.springframework.boot:spring-boot-gradle-plugin:2.4.5"],
			["org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"],
			["com.google.guava:guava"]
		)
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'com.google.cloud.tools.jib' version '2.8.0'
	id 'org.sonarqube' version '3.1.1'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.aeo.checkout.pricing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	jib {
		container {
			user '10000:10000'
			labels = [pillar:'customer-checkout']
			jvmFlags = ['-javaagent:/app/libs/newrelic-agent-6.4.2.jar', 
						'-Dnewrelic.config.file=/app/resources/newrelic.yml']
		}
		from {
			image "artifactory.ae.com:443/docker_hub/openjdk"
		}
	}
}

repositories {
	maven {
		url "https://artifactory.ae.com/artifactory/libs-release/"
	}
}

ext {
	set('springCloudGcpVersion', "2.0.0")
	set('springCloudVersion', "2020.0.2")
	set('newRelicVersion', "6.4.2")
}

dependencies {
	implementation (
		
		// web and cloud
		['org.springframework.boot:spring-boot-starter-webflux'],
		['io.springfox:springfox-boot-starter:3.0.0'],
		['org.springframework.cloud:spring-cloud-starter'],
		
		// resilience
   		['org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.7.RELEASE'],
   		['org.springframework:spring-aspects'],
   		['org.springframework.retry:spring-retry'],
		
		// monitoring and logging
		['org.springframework.boot:spring-boot-starter-actuator'],
		['org.springframework.cloud:spring-cloud-starter-sleuth'],
   		["com.newrelic.agent.java:newrelic-api:${newRelicVersion}"],
   		["com.newrelic.agent.java:newrelic-agent:${newRelicVersion}"],
   		['com.aeo:logging-spring-boot:1.1.0'],
   		
   		// database
   		['com.google.cloud.sql:cloud-sql-connector-r2dbc-postgres:1.2.2'],
   		['org.springframework.boot:spring-boot-starter-data-r2dbc'],
   		['io.r2dbc:r2dbc-postgresql'],
   		['org.postgresql:postgresql'],
   		['org.springframework.cloud:spring-cloud-gcp-starter-secretmanager:1.2.7.RELEASE'],
   		
   		// chaos testing
   		["de.codecentric:chaos-monkey-spring-boot:2.3.9"]
	)
	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	testImplementation ( 
		['org.springframework.boot:spring-boot-starter-test'],
		['io.projectreactor:reactor-test'],
		['org.junit.jupiter:junit-jupiter'],
		['org.mockito:mockito-junit-jupiter']
	)
	
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
	finalizedBy jacocoTestReport
}

sonarqube {
	properties {
		property "sonar.projectKey", "MSAT-PRICING-SRVC"
		property "sonar.projectName", "Checkout Pricing Service Microservices Application"
		property "sonar.projectVersion", "1.0"
		property "sonar.sourceEncoding", "iso-8859-1"
		property "sonar.coverage.exclusions", "**/model/*,**/model/**,**/config/*,**/config/**,**/*Application.java"
		property "sonar.sources","src/main/java"
		property "sonar.exclusions", "src/test/java/**/*"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.login","admin"
		property "sonar.password","admin"
	 }
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/reports/code-coverage")
	}
}
