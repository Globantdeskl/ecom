package com.app;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.sun.tools.javac.resources.CompilerProperties.Notes;

public class FirstNonRepeated {
	public static void main(String args[]) {

		String input = "Java articles are Awesome";
		String st = Stream.of(input.split("")).distinct().collect(Collectors.joining(""));
		char p = st.charAt((st.length() - 1) / 2);
		System.out.println(p);

		List<Integer> myList = Arrays.asList(10, 15, 8, 49, 25, 98, 98, 32, 15);

		myList.stream().sorted().forEach(System.out::println);

		myList.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);

		myList.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);

		List<Integer> integerList = Arrays.asList(4, 5, 6, 7, 1, 2, 3);
		integerList.stream().map(i -> i * i * i).filter(i -> i > 50).forEach(System.out::println);

		int arr[] = { 99, 55, 203, 99, 4, 91 };
		Arrays.parallelSort(arr);
		// Sorted the Array using parallelSort()

		Arrays.stream(arr).forEach(x -> System.out.print(x + " "));

		// List<String> nameLst =
		// names.stream().map(String::toUpperCase).collect(Collectors.toList());
		// System.out.println(nameLst);

		List<String> names = Arrays.asList("AA", "BB", "AA", "CC");

		Map<String, Long> namesCount = names.stream()
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		System.out.println(namesCount);

//		Map<String, Long> namesCount = names.stream().filter(x -> Collections.frequency(names, x) > 1)
//				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
//		System.out.println(namesCount);
		
		
		Optional.ofNullable(noteLst)
        .orElseGet(Collections::emptyList) // creates empty immutable list: [] in case noteLst is null
        .stream().filter(Objects::nonNull) //loop throgh each object and consider non null objects
        .map(note -> Notes::getTagName) // method reference, consider only tag name
        .forEach(System.out::println); // it will print tag names
		
		
		
		

	}
}

//Jav rticlesAwom