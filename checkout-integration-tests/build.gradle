buildscript {
    repositories {
        mavenCentral()
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath "org.gradle:test-retry-gradle-plugin:1.1.6"
    }
    
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.gradle.test-retry'

repositories {
    mavenCentral()
}

group 'com.aeo.framework'
version '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    compile group: 'io.github.openfeign', name: 'feign-okhttp', version: '10.8'
    compile group: 'io.github.openfeign', name: 'feign-gson', version: '10.8'
    compile group: 'io.github.openfeign', name: 'feign-slf4j', version: '10.8'
    compile group: 'io.github.openfeign', name: 'feign-core', version: '10.8'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.5.RELEASE'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compile group: 'org.testng', name: 'testng', version: '7.1.0'
    compile(
            'io.rest-assured:rest-assured:3.3.0',
            'org.springframework.boot:spring-boot-starter-test'
    )
    testCompile group: 'org.awaitility', name: 'awaitility', version: '4.0.3'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    compile 'com.google.cloud:google-cloud-pubsub:1.88.0'
    compile 'org.springframework.cloud:spring-cloud-gcp-starter-pubsub:1.1.2.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-gcp-pubsub-stream-binder:1.1.2.RELEASE'
    testCompile 'io.rest-assured:rest-assured:3.3.0'
    implementation 'com.google.cloud:google-cloud-dialogflow:0.117.0-alpha'
    implementation 'io.grpc:grpc-okhttp:1.25.0'
}

def springProfilesActive = "spring.profiles.active"

task setActiveSpringProfile {
    def qaEnv = "SIT"
    def devEnv = "DEV"
    def bambooEnv = "bamboo.env"

    if (System.getProperty(bambooEnv) == qaEnv) {
        System.setProperty(springProfilesActive, qaEnv)
    } else if (System.getProperty(bambooEnv) == devEnv) {
        System.setProperty(springProfilesActive, devEnv)
    } else System.setProperty(springProfilesActive, qaEnv)
}

test {
    dependsOn setActiveSpringProfile
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)

    useTestNG(){
        useDefaultListeners=true
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    maxParallelForks = 4

    testLogging {
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

task fraudTests(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        includeGroups 'fraud'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

task taxTests(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        includeGroups 'tax'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

task ghostRetailTests(type: Test) {
    useTestNG() {
        useDefaultListeners = true
    }

    include 'ghostRetail/**.class'

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

task splitOrderTests(type: Test) {
    dependsOn setActiveSpringProfile
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)

    useTestNG() {
        useDefaultListeners = true
    }

    filter {
        includeTestsMatching 'SplitOrders'
    }

    retry {
        maxRetries.set(1)
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor.getDisplayName())
    }

    maxParallelForks = 5

    testLogging {
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}